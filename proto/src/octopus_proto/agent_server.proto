//
// agent_server.proto
// Copyright (C) 2023 db3.network Author imotai <codego.me@gmail.com>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";
package octopus_agent_proto;

import "common.proto";

message SendTaskRequest {
  repeated string input_files = 1;
  string task = 2;
}

message OnAgentAction {
  string input = 1;
  string tool = 2;
}

message OnAgentActionEnd {
  string output = 1;
  repeated string output_files = 2;
}

message FinalRespond {
  string answer = 1;
}

message TaskRespond {
  int32 token_usage = 1;
  int32 iteration = 2;
  string model_name = 3;
  oneof body {
    OnAgentAction on_agent_action = 5;
    OnAgentActionEnd on_agent_action_end = 6;
    FinalRespond final_respond = 7;
  }
}

message AddKernelRequest {
  string endpoint = 1;
  string key = 3;
}

message AddKernelResponse {
  int32 code = 1;
  string msg = 2;
}

message AssembleAppRequest {
  string name = 1;
  string language = 2;
  string code = 3;
  repeated string saved_filenames = 4;
  string desc = 5;
}

message AssembleAppResponse {
  int32 code = 1;
  string msg = 2;
}

message RunAppRequest {
  string name = 1;
}

service AgentServer {
  // upload the file
  rpc upload(stream octopus_common_proto.FileChunk) returns (octopus_common_proto.FileUploaded) {}
  rpc download(octopus_common_proto.DownloadRequest) returns (stream octopus_common_proto.FileChunk) {}
  rpc send_task(SendTaskRequest) returns (stream TaskRespond) {}
  rpc add_kernel(AddKernelRequest) returns (AddKernelResponse) {}
  // assemble the application
  rpc assemble(AssembleAppRequest) returns (AssembleAppResponse) {}
  // run assembled application
  rpc run(RunAppRequest) returns (stream TaskRespond) {}
}
