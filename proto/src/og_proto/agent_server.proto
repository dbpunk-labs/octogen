// SPDX-FileCopyrightText: 2023 imotai <jackwang@octogen.dev>
// SPDX-FileContributor: imotai
//
// SPDX-License-Identifier: Elastic-2.0

syntax = "proto3";
package octopus_agent_proto;

import "common.proto";

message ProcessOptions {
    // respond all output in stream
    bool streaming = 1;
    // the llm name eg gpt3.5, gpt4 or codellama
    string llm_name = 2;
    // the token limit for input sent to  model
    int32 input_token_limit = 3;
    // the token limit for output generated by model
    int32 output_token_limit = 4;
    // the max time(s) for processing task
    int32 timeout = 5;
}

message ProcessTaskRequest {
  // the input_files will be uploaded to the server
  repeated string input_files = 1;
  // the task description
  string task = 2;
  // the context id for task
  string context_id = 3;
  ProcessOptions options = 4;
}

message OnStepActionStart {
  // the input for the tool
  string input = 1;
  // the tool name
  string tool = 2;
}

message OnStepActionEnd {
  string output = 1;
  repeated string output_files = 2;
  bool has_error = 3;
}

message FinalAnswer {
  string answer = 1;
}

message ContextState {
  int32 output_token_count = 1;
  int32 input_token_count = 2;
  string llm_name = 3;
  // the time(ms) of code execution and text generation
  int32 total_duration = 4;
  // the prompt token count
  // the time(ms) that the model has been used
  int32 llm_response_duration = 5;
}
message TypingContent {
  string content = 1;
  string language = 2;
}

message TaskResponse {
  ContextState state = 1;
  enum ResponseType {
    OnStepActionStart = 0;
    OnStepActionStreamStdout = 1;
    OnStepActionStreamStderr = 2;
    OnStepActionEnd = 3;
    OnFinalAnswer = 4;
    OnModelTypeText = 5;
    OnModelTypeCode = 6;
    OnModelOutputError = 7;
    OnInputTokenLimitExceed = 8;
    OnOutputTokenLimitExceed = 9;
    OnSystemError = 10;
  }
  ResponseType response_type = 4;
  oneof body {
    OnStepActionStart on_step_action_start = 5;
    OnStepActionEnd on_step_action_end = 6;
    FinalAnswer final_answer = 7;
    string console_stdout = 8;
    string console_stderr = 9;
    string error_msg = 10;
    TypingContent typing_content = 11;
  }
}

message AddKernelRequest {
  string endpoint = 1;
  string key = 3;
}

message AddKernelResponse {
  int32 code = 1;
  string msg = 2;
}

message AssembleAppRequest {
  string name = 1;
  string language = 2;
  string code = 3;
  repeated string saved_filenames = 4;
  string desc = 5;
}

message AssembleAppResponse {
  int32 code = 1;
  string msg = 2;
}

message RunAppRequest {
  string name = 1;
}

message AppInfo {
  string name = 1;
  string language = 2;
  // second
  int32 ctime = 3;
  string desc = 4;
}

message QueryAppsRequest {}

message QueryAppsResponse {
  repeated AppInfo apps = 1;
}

message PingRequest {}
message PongResponse {
  int32 code = 1;
  string msg = 2;
}

service AgentServer {
  // check the connection is ok
  rpc ping(PingRequest) returns (PongResponse) {}
  // upload the file
  rpc upload(stream octopus_common_proto.FileChunk) returns (octopus_common_proto.FileUploaded) {}
  rpc download(octopus_common_proto.DownloadRequest) returns (stream octopus_common_proto.FileChunk) {}
  rpc process_task(ProcessTaskRequest) returns (stream TaskResponse) {}
  rpc add_kernel(AddKernelRequest) returns (AddKernelResponse) {}
}
