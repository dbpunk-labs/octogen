// SPDX-FileCopyrightText: 2023 imotai <jackwang@octogen.dev>
// SPDX-FileContributor: imotai
//
// SPDX-License-Identifier: Elastic-2.0

syntax = "proto3";
package octopus_agent_proto;

import "common.proto";

message SendTaskRequest {
  repeated string input_files = 1;
  string task = 2;
}

message OnAgentAction {
  string input = 1;
  string tool = 2;
}

message OnAgentActionEnd {
  string output = 1;
  repeated string output_files = 2;
  bool has_error = 3;
}

message FinalRespond {
  string answer = 1;
}

message TaskState {
  // the generated token from model
  int32 generated_token_count = 1;
  int32 iteration_count = 2;
  string model_name = 3;
  // the time(ms) of code execution and text generation
  int32 total_duration = 4;
  // the prompt token count
  int32 sent_token_count = 5;
  // the time(ms) that the model has been used
  int32 model_respond_duration = 6;
}

message TaskRespond {
  TaskState state = 1;
  enum RespondType {
    OnAgentActionType = 0;
    OnAgentActionStdout = 1;
    OnAgentActionStderr = 2;
    OnAgentActionEndType = 3;
    OnFinalAnswerType = 4;
    OnAgentTextTyping = 5;
    OnAgentCodeTyping = 6;
  }
  RespondType respond_type = 4;
  oneof body {
    OnAgentAction on_agent_action = 5;
    OnAgentActionEnd on_agent_action_end = 6;
    FinalRespond final_respond = 7;
    string console_stdout = 8;
    string console_stderr = 9;
    string typing_content = 10;
  }
}

message AddKernelRequest {
  string endpoint = 1;
  string key = 3;
}

message AddKernelResponse {
  int32 code = 1;
  string msg = 2;
}

message AssembleAppRequest {
  string name = 1;
  string language = 2;
  string code = 3;
  repeated string saved_filenames = 4;
  string desc = 5;
}

message AssembleAppResponse {
  int32 code = 1;
  string msg = 2;
}

message RunAppRequest {
  string name = 1;
}

message AppInfo {
  string name = 1;
  string language = 2;
  // second
  int32 ctime = 3;
  string desc = 4;
}

message QueryAppsRequest {}

message QueryAppsResponse {
  repeated AppInfo apps = 1;
}

message PingRequest {}
message PongResponse {
  int32 code = 1;
  string msg = 2;
}
service AgentServer {
  // check the connection is ok
  rpc ping(PingRequest) returns (PongResponse) {}
  // upload the file
  rpc upload(stream octopus_common_proto.FileChunk) returns (octopus_common_proto.FileUploaded) {}
  rpc download(octopus_common_proto.DownloadRequest) returns (stream octopus_common_proto.FileChunk) {}
  rpc send_task(SendTaskRequest) returns (stream TaskRespond) {}
  rpc add_kernel(AddKernelRequest) returns (AddKernelResponse) {}
  // assemble the application
  rpc assemble(AssembleAppRequest) returns (AssembleAppResponse) {}
  // run assembled application
  rpc run(RunAppRequest) returns (stream TaskRespond) {}
  // query all apps
  rpc query_apps(QueryAppsRequest) returns (QueryAppsResponse) {}
}
