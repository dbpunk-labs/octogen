// SPDX-FileCopyrightText: 2023 imotai <jackwang@octogen.dev>
// SPDX-FileContributor: imotai
//
// SPDX-License-Identifier: Elastic-2.0

syntax = "proto3";
package octopus_kernel_proto;

import "common.proto";

// Start the kernel request
message StartKernelRequest {
  string kernel_name = 1;
}

// Start the kernel response
message StartKernelResponse {
  // the kernel key
  int32 code = 2;
  string msg = 3;
}

message StopKernelRequest {
  string kernel_name = 1;
}

message StopKernelResponse {
  int32 code = 1;
  string msg = 2;
}

message RestartKernelRequest {
  string kernel_name = 1;
}

message RestartKernelResponse {
  int32 code = 2;
  string msg = 3;
}

message ExecuteRequest {
  string code = 1;
  string kernel_name = 2;
}

message ExecuteResponse {
  enum OutputType {
    // the stdout stream
    StdoutType = 0;
    // the stderr stream
    StderrType = 1;
    // the result
    ResultType = 2;
    // the traceback
    TracebackType = 3;
  }
  OutputType output_type = 1;
  string output = 2;
}

message GetStatusRequest {
  string kernel_name = 1;
}

message GetStatusResponse {
  bool is_alive = 1;
  int32 code = 2;
  string msg = 3;
}

service KernelServerNode {
  rpc start(StartKernelRequest) returns (StartKernelResponse) {}
  rpc stop(StopKernelRequest) returns (StopKernelResponse) {}
  rpc execute(ExecuteRequest) returns (stream ExecuteResponse) {}
  rpc get_status(GetStatusRequest) returns (GetStatusResponse) {}
  rpc upload(stream octopus_common_proto.FileChunk) returns (octopus_common_proto.FileUploaded) {}
  rpc download(octopus_common_proto.DownloadRequest) returns (stream octopus_common_proto.FileChunk) {}
}
